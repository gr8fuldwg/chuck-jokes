{"version":3,"sources":["chuck_pic.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","appElement","document","getElementById","Modal","setAppElement","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modalOpen","random","error","handleModalOpen","bind","assertThisInitialized","handleModalClose","_this2","axios","get","then","response","value","data","setState","catch","err","react_default","a","createElement","className","onClick","src","chuckPic","lib_default","closeTimeoutMS","isOpen","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uTCMlCC,EAAaC,SAASC,eAAe,QAC3CC,IAAMC,cAAcJ,GAGpB,IA2DeK,cAxDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAW,EACXC,OAAQ,GACRC,MAAO,MAETV,EAAKW,gBAAkBX,EAAKW,gBAAgBC,KAArBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACvBA,EAAKc,iBAAmBd,EAAKc,iBAAiBF,KAAtBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KARPA,iFAUD,IAAAe,EAAAZ,KAChBa,IAAMC,IAdQ,2CAeXC,KAAK,SAAAC,GAAY,IACRC,EAAUD,EAASE,KAAnBD,MACRL,EAAKO,SAAS,CACZd,WAAW,EACXY,MAAOA,EACPV,MAAO,SAGVa,MAAM,SAAAC,GACLT,EAAKO,SAAS,CACZZ,MAAOc,iDAMbrB,KAAKmB,SAAS,CAAEd,WAAW,qCAG3B,OACEiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iEACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mGAChBC,QAAS1B,KAAKQ,iBADhB,YAKFc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeE,IAAKC,MACnCN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAOE,UAAU,iBAAiBK,eAAgB,IAAKC,OAAQ/B,KAAKI,MAAMC,WACxEiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yDAAyDC,QAAS1B,KAAKW,kBAAzF,UAEFW,EAAAC,EAAAC,cAAA,QAAMC,UAAU,4DACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,+BAEFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAazB,KAAKI,MAAMa,iBAjD/Be,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASjD,SAASC,eAAe,SD0H3C,kBAAmBiD,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.05e7b325.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chuck_pic.39b94c0e.png\";","import React, { Component } from 'react';\nimport Modal from 'react-modal';\nimport './App.css';\nimport axios from 'axios';\nimport chuckPic from './chuck_pic.png';\n\nconst appElement = document.getElementById('root');\nModal.setAppElement(appElement);\n\n// const isDev = process.env.NODE_ENV !== 'production';\nconst CHUCK_API = 'https://api.chucknorris.io/jokes/random';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalOpen: false,\n      random: '',\n      error: null\n    }\n    this.handleModalOpen = this.handleModalOpen.bind(this);\n    this.handleModalClose = this.handleModalClose.bind(this);\n  }\n  handleModalOpen() {\n    axios.get(CHUCK_API)\n      .then(response => {\n        const { value } = response.data;\n        this.setState({\n          modalOpen: true,\n          value: value,\n          error: null,\n        });\n      })\n      .catch(err => {\n        this.setState({\n          error: err\n        });\n      });\n\n  }\n  handleModalClose() {\n    this.setState({ modalOpen: false });\n  }\n  render() {\n    return (\n      <div className=\"vh-100 bg-purple flex flex-column justify-center items-center\">\n        <header className=\"App-header\">\n          <button className=\"App-hit flex justify-center items-center f1 br-100 h5 w5 dim ph8 pv2 dib black bg-yellow mr4 mb2\"\n            onClick={this.handleModalOpen}>\n            Hit Me!\n          </button>\n        </header>\n        <img className=\"hvr-buzz-out\" src={chuckPic} />\n        <Modal className=\"bg-black white\" closeTimeoutMS={150} isOpen={this.state.modalOpen}>\n          <div className=\"App-close flex justify-end mr4 \">\n            <button className=\"f1 ph3 pv2 mb2 dib black dim bg-white b--white mt4 mr4\" onClick={this.handleModalClose}>Close</button>\n          </div>\n          <main className=\"flex-grow-1 flex flex-column justify-center items-center\">\n            <div className=\"flex justify-center items-center flex-column h-100\">\n              <h1 className=\"App-h1\">Joke's on............Chuck</h1>\n            </div>\n            <p className=\"App-p ml4\">{this.state.value}</p>\n          </main>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons/css/tachyons.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}